# 15/11/24
Tasks Completed:
- Initial Migration to React:
    Migrated the index.js and its related content from EJS to React.
    Implemented a functional structure for React with dynamic rendering of components using JSON files.

- Navbar Implementation:
    Created a fully functional Navbar using React-Bootstrap.
    Integrated dropdown menus and navigation links that dynamically scroll to specific sections of the page.

- Dynamic Rendering with JSON:
    Converted hardcoded data in the original EJS files into structured JSON.
    Ensured all dynamic content in the index page (e.g., sections, titles, and images) is rendered dynamically using reusable components.

- Main Sections:
    Developed reusable section components (Section, MainDescriptionSection, and GalleryCarousel) for the index page.
    Successfully rendered the content of the Home page, including dynamic image galleries and descriptions.

- Basic CSS Styling:
    Adapted key CSS styles for React compatibility.
    Styled the Navbar, carousel, and main sections to resemble the original design.

Challenges Faced:

- Dynamic Data Management:
    Problem: Handling dynamic data while keeping components reusable and organized.
    Solution: Structured the project to load content dynamically via JSON files, ensuring all components rely on props for data input.
    
- Bootstrap Integration:
    Problem: Ensuring React-Bootstrap components worked seamlessly with existing styles and functionality.
    Solution: Verified correct imports for react-bootstrap components and adjusted custom styles to avoid conflicts.

- Navigation and Routing:
    Problem: Setting up smooth navigation between sections of the page using React-Router.
    Solution: Successfully implemented routing for internal links, ensuring smooth scrolling and correct targeting.
    
- Carousel Customization:
    Problem: Styling the gallery carousel to match the original layout while keeping captions responsive.
    Solution: Applied custom CSS to adjust image scaling, caption placement, and overall responsiveness.

#16/11/24

Tasks Completed:
- Migration of Data and Graphs Sections to React:
    Migrated the Datos and Graficas sections from EJS to React, ensuring functionality and responsiveness.
    Created dynamic, reusable components for rendering tables (Datos) and graph sections (Graficas).
- Implementation of Dynamic Data Handling:
    Imported large datasets directly into the Datos component using JSON.
    Ensured Graficas renders sections dynamically based on graficasData.json, maintaining consistency with the original design.
- Compact Pagination in Data Table:
    Designed a compact paginator for the Datos section to prevent overflow on pages with large datasets.
    Included "First," "Previous," "Next," and "Last" buttons for enhanced navigation.
- Enhanced User Navigation:
    Improved hash-based navigation to ensure redirection to the root (/) and scrolling to the correct section dynamically.
    Adjusted the Navbar to handle transitions between sections and routes seamlessly.
- Graph Section Refinement:
    Added titles, descriptions, and images to each graph section dynamically.
    Styled the graph sections with captions and descriptions, ensuring consistency with the application's overall design.
- Custom CSS Adjustments:
    Adapted existing styles for the Datos and Graficas sections to React.
    Ensured compatibility with Bootstrap's responsive design.

Challenges Faced:
- Dynamic Table and Pagination:
    Problem: Handling large datasets dynamically while maintaining performance.
    Solution: Implemented a paginated approach with a compact range, allowing users to navigate easily without overwhelming the UI.

- Navigation Between Routes:
    Problem: Smooth scrolling to specific sections after switching routes was inconsistent.
    Solution: Refined the hash navigation logic to first redirect to the root (/) and then scroll to the desired section using the native href behavior.

- JSON-based Component Rendering:
    Problem: Adapting hardcoded content into JSON files while preserving the structure and reusability.
    Solution: Designed reusable components that accept data through props and dynamically render content.

- Styling for Graph Captions and Tables:
    Problem: Adjusting captions and table styles to match the original layout while ensuring responsiveness.
    Solution: Applied media queries and custom CSS to enhance the presentation of small images and wide tables.